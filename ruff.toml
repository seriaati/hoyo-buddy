line-length = 100
target-version = "py312"


[lint]
preview = true
select = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "UP",
  "ANN",
  "ASYNC",
  "S",
  "B",
  "A",
  "C4",
  "DTZ",
  "EM",
  "FA",
  "ISC",
  "LOG",
  "G",
  "PIE",
  "T20",
  "PT",
  "RSE",
  "RET",
  "SLOT",
  "SIM",
  "TC",
  "ARG",
  "PTH",
  "PL",
  "TRY",
  "FAST",
  "PERF",
  "FURB",
  "RUF",
]
ignore = [
  "S101",    # Assert used
  "PLR2004", # Magic value used
  "RUF003",  # Comment contains ambiguous character
  "PLR6301", # Method could be a function, class method, or static method
  "ANN401",  # typing.Any used
  "DTZ007",  # Naive datetime constructed

  # Custom ignores for this project
  "RUF006",  # Store a reference to the return value of asyncio.create_task
  "E501",    # Line too long
  "PLR0913", # Too many arguments in function definition
  "PLR0917", # Too many positional arguments
  "PLR0904", # Too many public methods
  "TRY301",  # Abstract raise to an inner function
  "RET503",  # Missing explicit return statements
  "S311",    # Cryptographically weak pseudo-random number generator used
  "UP046",   # TypeVar used
  "UP040",   # TypeAlias used
  "S105",    # Possible hardcoded password assigned to variable
  "S301",    # pickle module used
  "S403",    # pickle module used
  "E741",    # Ambiguous variable name

  # Refactor related ignores
  "C901",    # Function is too complex
  "PLR0914", # Too many local variables
  "PLR0915", # Too many statements
  "PLR0912", # Too many branches
  "PLR0911", # Too many return statements
]

[lint.per-file-ignores]
"**/__init__.py" = ["F403", "F401"]
"./migrations/*.py" = ["ALL"]
"hoyo_buddy/draw/**/*.py" = ["PLR", "C"]
"hoyo_buddy/draw/drawer.py" = ["F405"]
"hoyo_buddy/models.py" = ["TC002"]
"test_*.py" = ["ALL"]
"test.py" = ["ALL"]
"restart.py" = ["T201", "S602", "S404", "S603"]

[lint.flake8-type-checking]
quote-annotations = true
runtime-evaluated-base-classes = [
  "pydantic.BaseModel",
  "pydantic_settings.BaseSettings",
]
runtime-evaluated-decorators = [
  "discord.ext.commands.command",
  "discord.app_commands.command",
]

[lint.mccabe]
max-complexity = 15

[lint.pydocstyle]
convention = "google"

[lint.isort]
required-imports = ["from __future__ import annotations"]
split-on-trailing-comma = false

[format]
skip-magic-trailing-comma = true
